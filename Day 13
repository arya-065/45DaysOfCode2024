#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int jump(vector<int>& nums) {
    int n = nums.size();
    if (n <= 1) return 0;  // No jumps needed if there is 0 or 1 element
    
    int jumps = 0;          // Number of jumps made
    int currentEnd = 0;    // The farthest point we can reach with the current number of jumps
    int farthest = 0;       // The farthest point we can reach with one more jump
    
    for (int i = 0; i < n - 1; i++) {
        // Update the farthest we can reach from the current index
        farthest = max(farthest, i + nums[i]);
        
        // If we have reached the end of the current jump
        if (i == currentEnd) {
            jumps++;           // We need to make a jump
            currentEnd = farthest; // Update the end for the next jump
            
            // If we can reach the last index, we can return
            if (currentEnd >= n - 1) break;
        }
    }
    
    return jumps;
}

int main() {
    vector<int> nums = {2, 3, 1, 1, 4}; // Example input
    cout << "Minimum number of jumps: " << jump(nums) << endl;
    return 0;
}
