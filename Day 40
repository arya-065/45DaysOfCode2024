#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>

using namespace std;

vector<int> topKFrequent(vector<int>& nums, int k) {
    // Step 1: Count the frequency of each element in the nums array
    unordered_map<int, int> freqMap;
    for (int num : nums) {
        freqMap[num]++;
    }

    // Step 2: Use a min-heap (priority queue) to keep track of the top k elements
    // The priority queue will store pairs of (frequency, element), and we want to pop the element with the smallest frequency when size exceeds k
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;

    // Step 3: Build the heap
    for (auto& entry : freqMap) {
        minHeap.push({entry.second, entry.first});
        if (minHeap.size() > k) {
            minHeap.pop();  // Remove the element with the smallest frequency
        }
    }

    // Step 4: Extract the elements from the heap and return the result
    vector<int> result;
    while (!minHeap.empty()) {
        result.push_back(minHeap.top().second);
        minHeap.pop();
    }

    // Since the heap gives elements in ascending order of frequency, reverse the result to get them in descending order
    reverse(result.begin(), result.end());
    return result;
}

int main() {
    // Example 1
    vector<int> nums1 = {1, 1, 1, 2, 2, 3};
    int k1 = 2;
    vector<int> result1 = topKFrequent(nums1, k1);
    cout << "Top " << k1 << " frequent elements: ";
    for (int num : result1) {
        cout << num << " ";
    }
    cout << endl;

    // Example 2
    vector<int> nums2 = {1};
    int k2 = 1;
    vector<int> result2 = topKFrequent(nums2, k2);
    cout << "Top " << k2 << " frequent elements: ";
    for (int num : result2) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
