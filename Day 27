#include <iostream>
#include <queue>

struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;

    Node(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
};

class Solution {
public:
    void connect(Node* root) {
        if (!root) return;

        std::queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();
            Node* prev = nullptr;

            for (int i = 0; i < size; ++i) {
                Node* current = q.front();
                q.pop();

                if (prev) {
                    prev->next = current; // Set the next pointer
                }
                prev = current; // Update prev to the current node

                // Add children to the queue
                if (current->left) q.push(current->left);
                if (current->right) q.push(current->right);
            }
            prev->next = nullptr; // Last node in level points to NULL
        }
    }

    void printTree(Node* root) {
        while (root) {
            Node* current = root;
            while (current) {
                std::cout << current->val << " -> ";
                current = current->next;
            }
            std::cout << "NULL" << std::endl;
            root = root->left; // Move to the next level
        }
    }
};

int main() {
    // Create a perfect binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    Solution solution;
    solution.connect(root);
    
    // Print the tree levels with next pointers
    solution.printTree(root);

    // Clean up memory (not shown for simplicity)
    // In practice, you should delete the allocated nodes

    return 0;
}
