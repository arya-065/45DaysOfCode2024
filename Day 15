#include <iostream>
#include <vector>
#include <climits>

int minSubArrayLen(int target, const std::vector<int>& nums) {
    int left = 0, sum = 0, minLength = INT_MAX;

    for (int right = 0; right < nums.size(); ++right) {
        sum += nums[right]; // Add the current element to the sum
        
        // Shrink the window as long as the sum is greater than or equal to target
        while (sum >= target) {
            minLength = std::min(minLength, right - left + 1); // Update the minimum length
            sum -= nums[left]; // Remove the leftmost element from the sum
            left++; // Move the left pointer to the right
        }
    }

    return (minLength == INT_MAX) ? 0 : minLength; // Return 0 if no valid subarray was found
}

int main() {
    std::vector<int> nums = {2, 3, 1, 2, 4, 3};
    int target = 7;

    int result = minSubArrayLen(target, nums);
    if (result > 0) {
        std::cout << "The minimal length of the subarray is: " << result << std::endl;
    } else {
        std::cout << "No subarray found with the sum >= " << target << std::endl;
    }

    return 0;
}
