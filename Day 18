class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:
    # Dummy head for the result linked list
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0

    # Traverse both linked lists
    while l1 or l2 or carry:
        # Get values from the current nodes or 0 if we've reached the end
        val1 = l1.val if l1 else 0
        val2 = l2.val if l2 else 0
        
        # Calculate the sum and the new carry
        total = val1 + val2 + carry
        carry = total // 10
        current.next = ListNode(total % 10)  # Create a new node with the digit

        # Move to the next nodes
        current = current.next
        if l1: l1 = l1.next
        if l2: l2 = l2.next

    return dummy_head.next  # Return the next of dummy head, which is the actual start of the result list

# Example usage:
def print_linked_list(node: ListNode):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")

# Creating linked lists for testing: (2 -> 4 -> 3) + (5 -> 6 -> 4)
l1 = ListNode(2, ListNode(4, ListNode(3)))
l2 = ListNode(5, ListNode(6, ListNode(4)))

result = addTwoNumbers(l1, l2)
print_linked_list(result)  # Output should be: 7 -> 0 -> 8 -> None
